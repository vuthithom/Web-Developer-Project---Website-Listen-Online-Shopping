package com.demo.entities;
// Generated Nov 23, 2021, 8:37:11 AM by Hibernate Tools 5.1.10.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonFormat;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "ecommerce_db", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class Users implements java.io.Serializable {

	private Integer id;
	private Roles roles;
	private String username;
	private String password;
	private String fullname;

	@JsonFormat(pattern = "dd/MM/yyyy")
	private Date birthday;
	
	private String phone;
	private String email;
	
	@JsonFormat(pattern = "dd/MM/yyyy")
	private Date created;
	
	@JsonFormat(pattern = "dd/MM/yyyy")
	private Date updated;
	
	private boolean status;
	
	@JsonFormat(pattern = "dd/MM/yyyy")
	private Date banTerm;
	
	private String address;
	private Set<ChatChanels> chatChanelses = new HashSet<ChatChanels>(0);
	private Set<TransactionDetails> transactionDetailses = new HashSet<TransactionDetails>(0);
	private Set<Notifications> notificationses = new HashSet<Notifications>(0);
	private Set<Carts> cartses = new HashSet<Carts>(0);
	private Set<Services> servicesesForCreatedId = new HashSet<Services>(0);
	private Set<Banners> bannersesForCreaterId = new HashSet<Banners>(0);
	private Set<Comments> commentses = new HashSet<Comments>(0);
	private Set<Banners> bannersesForUpdaterId = new HashSet<Banners>(0);
	private Set<Services> servicesesForUpdatedId = new HashSet<Services>(0);
	private Set<Stores> storeses = new HashSet<Stores>(0);
	private Set<ChatMessages> chatMessageses = new HashSet<ChatMessages>(0);

	public Users() {
	}

	public Users(Roles roles, String username, String password, String fullname, Date birthday, String phone,
			String email, Date created, boolean status, String address) {
		this.roles = roles;
		this.username = username;
		this.password = password;
		this.fullname = fullname;
		this.birthday = birthday;
		this.phone = phone;
		this.email = email;
		this.created = created;
		this.status = status;
		this.address = address;
	}

	public Users(Roles roles, String username, String password, String fullname, Date birthday, String phone,
			String email, Date created, Date updated, boolean status, Date banTerm, String address, Set<ChatChanels> chatChanelses,
			Set<TransactionDetails> transactionDetailses, Set<Notifications> notificationses, Set<Carts> cartses,
			Set<Services> servicesesForCreatedId, Set<Banners> bannersesForCreaterId, Set<Comments> commentses,
			Set<Banners> bannersesForUpdaterId, Set<Services> servicesesForUpdatedId, Set<Stores> storeses,
			Set<ChatMessages> chatMessageses) {
		this.roles = roles;
		this.username = username;
		this.password = password;
		this.fullname = fullname;
		this.birthday = birthday;
		this.phone = phone;
		this.email = email;
		this.created = created;
		this.updated = updated;
		this.status = status;
		this.banTerm = banTerm;
		this.address = address;
		this.chatChanelses = chatChanelses;
		this.transactionDetailses = transactionDetailses;
		this.notificationses = notificationses;
		this.cartses = cartses;
		this.servicesesForCreatedId = servicesesForCreatedId;
		this.bannersesForCreaterId = bannersesForCreaterId;
		this.commentses = commentses;
		this.bannersesForUpdaterId = bannersesForUpdaterId;
		this.servicesesForUpdatedId = servicesesForUpdatedId;
		this.storeses = storeses;
		this.chatMessageses = chatMessageses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "role_id", nullable = false)
	public Roles getRoles() {
		return this.roles;
	}

	public void setRoles(Roles roles) {
		this.roles = roles;
	}

	@Column(name = "username", unique = true, nullable = false, length = 100)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 200)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "fullname", nullable = false, length = 100)
	public String getFullname() {
		return this.fullname;
	}

	public void setFullname(String fullname) {
		this.fullname = fullname;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "birthday", nullable = false, length = 10)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Column(name = "phone", nullable = false, length = 20)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "email", nullable = false, length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created", nullable = false, length = 10)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updated", length = 10)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@Column(name = "status", nullable = false)
	public boolean isStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ban_term", length = 10)
	public Date getBanTerm() {
		return this.banTerm;
	}

	public void setBanTerm(Date banTerm) {
		this.banTerm = banTerm;
	}
	
	@Column(name = "address", nullable = false, length = 500)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<ChatChanels> getChatChanelses() {
		return this.chatChanelses;
	}

	public void setChatChanelses(Set<ChatChanels> chatChanelses) {
		this.chatChanelses = chatChanelses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<TransactionDetails> getTransactionDetailses() {
		return this.transactionDetailses;
	}

	public void setTransactionDetailses(Set<TransactionDetails> transactionDetailses) {
		this.transactionDetailses = transactionDetailses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Notifications> getNotificationses() {
		return this.notificationses;
	}

	public void setNotificationses(Set<Notifications> notificationses) {
		this.notificationses = notificationses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Carts> getCartses() {
		return this.cartses;
	}

	public void setCartses(Set<Carts> cartses) {
		this.cartses = cartses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreatedId")
	public Set<Services> getServicesesForCreatedId() {
		return this.servicesesForCreatedId;
	}

	public void setServicesesForCreatedId(Set<Services> servicesesForCreatedId) {
		this.servicesesForCreatedId = servicesesForCreatedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByCreaterId")
	public Set<Banners> getBannersesForCreaterId() {
		return this.bannersesForCreaterId;
	}

	public void setBannersesForCreaterId(Set<Banners> bannersesForCreaterId) {
		this.bannersesForCreaterId = bannersesForCreaterId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Comments> getCommentses() {
		return this.commentses;
	}

	public void setCommentses(Set<Comments> commentses) {
		this.commentses = commentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByUpdaterId")
	public Set<Banners> getBannersesForUpdaterId() {
		return this.bannersesForUpdaterId;
	}

	public void setBannersesForUpdaterId(Set<Banners> bannersesForUpdaterId) {
		this.bannersesForUpdaterId = bannersesForUpdaterId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "usersByUpdatedId")
	public Set<Services> getServicesesForUpdatedId() {
		return this.servicesesForUpdatedId;
	}

	public void setServicesesForUpdatedId(Set<Services> servicesesForUpdatedId) {
		this.servicesesForUpdatedId = servicesesForUpdatedId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Stores> getStoreses() {
		return this.storeses;
	}

	public void setStoreses(Set<Stores> storeses) {
		this.storeses = storeses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<ChatMessages> getChatMessageses() {
		return this.chatMessageses;
	}

	public void setChatMessageses(Set<ChatMessages> chatMessageses) {
		this.chatMessageses = chatMessageses;
	}

}
